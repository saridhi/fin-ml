{
    "collab_server" : "",
    "contents" : "#'Library of functions that are relevant for Feature generation and engineering\n\n#'Create Features for a time series\n#'@param time_series \n#'@return zoo\ncreate_features <- function (time_series, feature_reader) {\n  \n  features <- getColumns(feature_reader)\n  feature_names <- names(features)\n  \n  features_list <- list()\n  \n  for (feature_name in feature_names) {\n    feature_attribs <- features[[feature_name]]\n    feature_series <- switch(feature_attribs$feature_type,\n                             'RSI_rule' = {\n                               rsi_series <- RSI(time_series$close, feature_attribs$period)\n                               rsi_rule = Rule(time_series, rsi_series)\n                               getTradeSignal(rsi_rule, buy_threshold = feature_attribs$oversold, \n                                              sell_threshold = feature_attribs$overbought)\n                             },\n                             'RSI' = RSI(time_series$close, feature_attribs$period),\n                             'SMA_rule' = {\n                               ma_series <- SMA(time_series$close, feature_attribs$period)\n                               ma_rule <- Rule(time_series, ma_series)\n                               getTradeSignal(ma_rule, \n                                              buy_threshold = ma_series, \n                                              sell_threshold = ma_series,\n                                              use_indicator = FALSE)\n                             },\n                             'ADX' = {\n                               adx_series <- ADX(c(time_series[,c('high', 'low', 'close')]), \n                                                 feature_attribs$period)[,4]\n                             },\n                             'ADX_rule' = {\n                               adx_series <- ADX(as.xts(c(time_series[,c('high', 'low', 'close')])), \n                                                 feature_attribs$period)[,4]\n                               adx_rule <- Rule(time_series, adx_series)\n                               getTradeSignal(adx_rule, \n                                              buy_threshold = feature_attribs$trending, \n                                              sell_threshold = feature_attribs$trending,\n                                              use_indicator = TRUE)\n                             },\n                             'Volatility' = {\n                               volatility(time_series$close, calc='close', N=feature_attribs$period)\n                             },\n                             'BB_rule' = {\n                               bb_series <- BBands(time_series$close, n=feature_attribs$period, sd=feature_attribs$sd)\n                               bb_rule <- Rule(time_series, bb_series)\n                               getTradeSignal(bb_rule, \n                                              buy_threshold = bb_series$dn, \n                                              sell_threshold = bb_series$up,\n                                              use_indicator = FALSE)\n                             }\n    )\n    features_list <- c(features_list, list(feature_series))\n  }\n  features_zoo <- do.call(merge, features_list)\n  colnames(features_zoo) <- feature_names\n  features_zoo\n}\n\n#'Create Targets for a time series\n#'@param time_series \n#'@param lag up/down n periods look forward\n#'@param use_sign if TRUE return a +1, -1 else return the percent difference\n#'@return zoo\ncreate_targets <- function(time_series, lag=-1, use_sign=TRUE) {\n  percent_diffs <- Delt(time_series$close)\n  if (use_sign) {\n    sign(lag(percent_diffs, lag))\n  } else {\n    lag(percent_diffs, lag)\n  }\n}\n",
    "created" : 1498425099032.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "242640571",
    "id" : "71D085DE",
    "lastKnownWriteTime" : 1500331762,
    "last_content_update" : 1500331762,
    "path" : "~/Dev/project-ada/src/R/FeatureEngineer/FeatureEngineer.R",
    "project_path" : "FeatureEngineer/FeatureEngineer.R",
    "properties" : {
    },
    "relative_order" : 11,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}